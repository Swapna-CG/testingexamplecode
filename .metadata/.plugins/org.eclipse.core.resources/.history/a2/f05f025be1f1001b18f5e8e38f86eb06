package com.example.springboottestingexample.service;



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.example.springboottestingexample.entity.Customer;
import com.example.springboottestingexample.repository.CustomerRepository;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;

public class CustomerServiceTest {
	
	private CustomerService customerService;
    private CustomerRepository customerRepository;

    @BeforeEach
    void setUp() {
    	customerRepository = mock(CustomerRepository.class);
        customerService = new CustomerService(customerRepository);
    }

    @Test
    void shouldSavedUserSuccessfully() {
    	Customer user = new Customer(null, "siva@gmail.com","siva","Siva");
        given(customerRepository.findByEmail(user.getEmail())).willReturn(Optional.empty());
        given(customerRepository.save(user)).willAnswer(invocation -> invocation.getArgument(0));

        User savedUser = customerService.createUser(user);

        assertThat(savedUser).isNotNull();

        verify(userRepository).save(any(User.class));
    }

    @Test
    void shouldThrowErrorWhenSaveUserWithExistingEmail() {
        User user = new User(1L, "siva@gmail.com","siva","Siva");
        given(userRepository.findByEmail(user.getEmail())).willReturn(Optional.of(user));

        assertThrows(UserRegistrationException.class, () -> {
            customerService.createUser(user);
        });

        verify(userRepository, never()).save(any(User.class));
    }

}
